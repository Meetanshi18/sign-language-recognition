Functionalities of different layers in a Convolutional Neural Network:    
    1. Convolutional Layer - Matches parts of an image with known image
    2. Relu Layer - Applies activation function
    3. Max Pooling Layer - Finds max from subparts and shrinks the image
    4. Flattening Layer -
    5. Fully Connected Layer -
    6. Output Layer - 
Source: https://bit.ly/2FlyiJC

--------------------------------------------
NumPy Module Functionalities
Source: https://bit.ly/2x7wWNY

--------------------------------------------
One - Hot Encoding: Labels are interpreted as bit maps and not words

--------------------------------------------
Keras Sequential Model:
    1. Specifying the input shape
    2. Optimizing
    3. Training
Source: https://keras.io/getting-started/sequential-model-guide/

--------------------------------------------
Figuring out which ML algorithms are suitable for multi class image classification:
1. Support Vector Machine (SVM) - Yes
    -> Draws hyper planes between extreme cases. Ignores most training examples. Works good for even extreme confusing cases.
Source: https://www.youtube.com/watch?v=Y6RRHw9uN9o

2. Random Forest - Yes

3. Naive Bayes - No 
    -> Naive Bayes is not good in handling unknown features. 
    It is calculated based on conditional probability and if a condition never appears before, 
    then it is just a very general prediction which wonâ€™t be very accurate.

    -> NB is a linear classifier. Hence it's discriminative power is poor as compared to non 
    linear classifiers such as SVM or ANN.

4. Artifical Neural Network (ANN) - Yes

----------------------------------------------
Generative Model - Makes a model for every class
Discriminative Model - Learns the hard and soft boundaries between different classes

----------------------------------------------
Reading and coverting image into pixel values using OpenCV - ( Still a lot to find out )
<
    import cv2
    img = cv2.imread('1.png')
    ...
    ...
>

----------------------------------------------
Visualizing the images using OpenCV

----------------------------------------------
Working of ML algorithms
    1. K-Nearest Neighbor
    2. Support Vector Machine

----------------------------------------------
Attributes of Convolution2D layer:

Weight Matrix:
    Shows weights for every input-output neuron connection.
    Rows correspond to input neurons and columns to output neurons
Bias Vector:
    A constant that that helps the model in a way that it can best fit the given data.
    Eg. y = mx + 'c' <--
Strides:
    Moving forward more than 1 step at a time while convoluting
Padding: 
    Adding sentinal 0s all around the image so that we don't throw away corner information and also image size doesn't shrink.

-----------------------------------------------
Activation Functions:
1. Relu: 
y = x > 0? x : 0
                /
               /
______________/

2. Sigmoid:
                         _
                   _ -
              _  -
__ _ _ _  --